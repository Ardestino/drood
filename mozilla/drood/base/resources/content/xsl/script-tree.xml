<?xml version="1.0" encoding="UTF-8"?>

<!--
/* ***** BEGIN LICENCE BLOCK *****
 * Version: MPL 2.0
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Drood Script Manager.
 * 
 * The Initial Developer of the Original Code is 4067479 Canada Inc.
 * t/a DROOD.
 * 
 * Portions created by Drood are Copyright (C) 4067479 Canada Inc. All
 * Rights Reserved.
 * 
 * Contributor(s):
 *
 ***** END LICENCE BLOCK ***** */
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

  <xsl:output method="xml" version="1.0" encoding="UTF-8"/>

  <xsl:variable name="lcase">abcdefghijklmnopqrstuvwxyz</xsl:variable>
  <xsl:variable name="ucase">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable>

  <xsl:template match="p[@class='sceneheading']">
    <xsl:variable name="prev" select="preceding-sibling::p[position()=1]"/>
    <scene id="{@id}"
           title="{translate(normalize-space(.), $lcase, $ucase)}"
           ordinal="{@scenestr}">
      <xsl:if test="$prev/@class = 'act'">
        <xsl:variable name="actname"
                  select="translate(normalize-space($prev), $lcase, $ucase)"/>
        <xsl:attribute name="act"><xsl:value-of select="$actname"/></xsl:attribute>
      </xsl:if>
      <xsl:apply-templates select="span[@class='note']"/>
      <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
      <xsl:if test="$next/@class != 'sceneheading'">
        <xsl:apply-templates select="$next"/>
      </xsl:if>
    </scene>
  </xsl:template>

  <xsl:template match="p[@class='act']">
    <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
    <xsl:if test="$next/@class != 'sceneheading'">
      <xsl:apply-templates select="$next"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="p[@class='character']">
    <speech speaker="{translate(normalize-space(.), $lcase, $ucase)}">
      <xsl:apply-templates select="span[@class='note']"/>
      <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
      <xsl:if test="$next/@class = 'dialog' or $next/@class = 'parenthetical'">
        <xsl:apply-templates select="$next" mode="speech"/>
      </xsl:if>
    </speech>
    <xsl:variable name="next" select="following-sibling::p[@class != 'dialog'
                        and @class != 'parenthetical'][position()=1]"/>
    <xsl:if test="$next/@class != 'sceneheading'">
      <xsl:apply-templates select="$next"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="p[@class='dialog' or @class='parenthetical']"
                mode="speech">
    <xsl:element name="{@class}"><xsl:apply-templates/></xsl:element>
    <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
    <xsl:if test="$next/@class = 'dialog' or $next/@class = 'parenthetical'">
      <xsl:apply-templates select="$next" mode="speech"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="p">
    <xsl:choose>
      <xsl:when test="@class and @class!=''">
        <xsl:element name="{@class}"><xsl:apply-templates/></xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="text"><xsl:apply-templates/></xsl:element>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
    <xsl:if test="$next/@class != 'sceneheading'">
      <xsl:apply-templates select="$next"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="span[@class='note']">
    <note>
      <xsl:if test="@style">
        <xsl:attribute name="style">
          <xsl:value-of select="@style"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:value-of select="@text"/>
    </note>
  </xsl:template>

  <xsl:template match="span[@class!='note'][@style]">
    <span>
      <xsl:for-each select="@*">
        <xsl:copy/>
      </xsl:for-each>
      <xsl:apply-templates select="node()"/>
    </span>
  </xsl:template>

</xsl:stylesheet>
