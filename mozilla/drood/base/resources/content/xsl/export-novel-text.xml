<?xml version="1.0" encoding="UTF-8"?>

<!--
/* ***** BEGIN LICENCE BLOCK *****
 * Version: MPL 2.0
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Drood Script Manager.
 * 
 * The Initial Developer of the Original Code is 4067479 Canada Inc.
 * t/a DROOD.
 * 
 * Portions created by Drood are Copyright (C) 4067479 Canada Inc. All
 * Rights Reserved.
 * 
 * Contributor(s):
 *
 ***** END LICENCE BLOCK ***** */
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

  <xsl:output method="text"
              encoding="UTF-8"
              media-type="text/unicode"/>

  <xsl:variable name="nl" select="'&#x0d;&#x0a;'" />
  <xsl:variable name="ws"
      select="'                                                            '"/>
  <!-- <xsl:variable name="bullet" select="'&#x2022;'" /> -->
  <xsl:variable name="bullet" select="'*'" />
  <xsl:variable name="nbsp" select="'&#xa0;'" />

  <xsl:template match="html">
    <text>
      <xsl:apply-templates select="body" />
    </text>
  </xsl:template>

  <xsl:template match="body">
    <xsl:apply-templates select="node()" />
    <xsl:value-of select="$nl"/>
    <xsl:value-of select="$nl"/>
  </xsl:template>

  <xsl:template match="p">
    <xsl:apply-templates select="node()" />
    <xsl:value-of select="$nl" />
    <xsl:value-of select="$nl" />
  </xsl:template>

  <xsl:template match="br">
    <xsl:if test="not(position()=last()) and not(position()=(last() - 1) and following-sibling::text()[normalize-space()=''])">
      <xsl:value-of select="$nl" />
    </xsl:if>
  </xsl:template>

  <xsl:template match="ol/li">
    <xsl:variable name="depth"
                  select="count(ancestor::*[self::ol or self::ul])" />
    <xsl:value-of select="substring($ws, 1, depth * 2)" />
    <xsl:value-of select="concat(count(preceding-sibling::li) + 1, '. ')" />
    <xsl:apply-templates select="node()" />
    <xsl:value-of select="$nl" />
  </xsl:template>

  <xsl:template match="ul/li">
    <xsl:variable name="depth"
                  select="count(ancestor::*[self::ol or self::ul])" />
    <xsl:value-of select="substring($ws, 1, depth * 2)" />
    <xsl:value-of select="concat($bullet, ' ')" />
    <xsl:apply-templates select="node()" />
    <xsl:value-of select="$nl" />
  </xsl:template>

  <!-- Inline elements -->
  <xsl:template match="a|abbr|acronym|b|bdo|big|cite|code|dfn|em|i|img|input|kbd|label|q|samp|select|small|span|strong|sub|sup|textarea|tt|var">
    <xsl:apply-templates select="node()" />
  </xsl:template>

  <xsl:template match="ol">
    <xsl:call-template name="handleol">
      <xsl:with-param name="depth" select="1" />
      <xsl:with-param name="prefix" select="''" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template match="ul">
    <xsl:call-template name="handleul">
      <xsl:with-param name="depth" select="1" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template match="*">
    <xsl:apply-templates select="node()" />
    <xsl:value-of select="$nl" />
  </xsl:template>

  <xsl:template match="text()">
    <xsl:value-of select="translate(., concat('&#x0a;', $nbsp), '  ')" />
  </xsl:template>

  <xsl:template name="handleol">
    <xsl:param name="depth" />
    <xsl:param name="prefix" />
    <xsl:for-each select="li|ol|ul">
      <xsl:if test="self::li">
        <xsl:variable name="position"
                      select="count(preceding-sibling::li) + 1" />
        <xsl:call-template name="outputli">
          <xsl:with-param name="depth" select="$depth" />
          <xsl:with-param name="prefix"
                          select="concat($prefix, string($position), '.')" />
        </xsl:call-template>
      </xsl:if>
      <xsl:if test="self::ol">
        <xsl:variable name="offset" select="count(preceding-sibling::li)" />
        <xsl:call-template name="handleol">
          <xsl:with-param name="depth" select="$depth + 1" />
          <xsl:with-param name="prefix"
                          select="concat($prefix, $offset, '.')" />
        </xsl:call-template>
      </xsl:if>
      <xsl:if test="self::ul">
        <xsl:call-template name="handleul">
          <xsl:with-param name="depth" select="$depth + 1" />
        </xsl:call-template>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="handleul">
    <xsl:param name="depth" />
    <xsl:for-each select="li|ol|ul">
      <xsl:if test="self::li">
        <xsl:call-template name="outputli">
          <xsl:with-param name="depth" select="$depth" />
          <xsl:with-param name="prefix" select="'*'" />
        </xsl:call-template>
      </xsl:if>
      <xsl:if test="self::ol">
        <xsl:call-template name="handleol">
          <xsl:with-param name="depth" select="$depth + 1" />
          <xsl:with-param name="prefix" select="''" />
        </xsl:call-template>
      </xsl:if>
      <xsl:if test="self::ul">
        <xsl:call-template name="handleul">
          <xsl:with-param name="depth" select="$depth + 1" />
        </xsl:call-template>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="outputli">
    <xsl:param name="depth" />
    <xsl:param name="prefix" />
    <xsl:value-of select="substring($ws, 1, $depth * 2)" />
    <xsl:value-of select="concat($prefix, ' ')" />
    <xsl:apply-templates select="node()" />
    <xsl:value-of select="$nl" />
  </xsl:template>

</xsl:stylesheet>
